#! /usr/bin/env sh

set -e

__numonic_git_delete_merged() {
	branch=
	remote=
	exclude="develop|next|main|master"

	while :; do
		case $1 in
			-dr|--dry-run)
				dry_run=1
				;;
			-d|--debug)
				debug=1
				;;
			-b|--branch)
				branch="${2}"
				shift
				;;
			--branch=*)
				branch="${1#*=}"
				;;
			-r|--remote)
				remote="${2}"
				shift
				;;
			-e|--exclude)
				if [ "${exclude#*"${1}"}" = "${exclude}" ]; then
					exclude="${exclude}|${1}"
				fi
				shift
				;;
			--exclude=*)
				if [ "${exclude#*"${1#*=}"}" = "${exclude}" ]; then
					exclude="${exclude}|${1#*=}"
				fi
				;;
			--remote=*)
				remote="${1#*=}"
				;;
			-h|--help)
				man git-delete-merged
				return 0
				;;
			?*)
				if [ -z "${branch:-}" ]; then
					branch="${1}"
				elif [ -z "${remote:-}" ]; then
					remote="${1}"
				else
					print-fail "git delete-merged: too many arguments, argument: ${1} is unexpected"
					man git-delete-merged | cat 1>&2
					return 1
				fi
				;;
			*)
				break
				;;
		esac
		shift
	done

	if [ -z "${branch:-}" ]; then
		branch="next"
	fi

	if [ -z "${remote:-}" ]; then
		remote="origin"
	fi

	default=

	for current in "${branch}" develop next main master; do
		if git show-ref --quiet --verify "refs/heads/${current}"; then
			if [ -z "${default:-}" ]; then
				default="${current}"
			fi

			if [ -z "${exclude:-}" ]; then
				exclude="${current}"
			elif [ "${exclude#*"${current}"}" = "${exclude}" ]; then
				exclude="${exclude}|${current}"
			fi
		fi
	done

	print-warn '' \
		'GIT DELETE MERGED' \
		"remote  : ${remote}" \
		"branch  : ${default}" \
		"exclude : ${exclude}" \
	''

	if [ -n "${dry_run:-}" ]; then
		return 0
	fi

	(
		if [ -n "${debug:-}" ]; then
			set -x
		fi

		git branch --merged "${branch}" \
			| grep -Ev " ${exclude}" \
			| xargs git branch -d 2>/dev/null
	)
}

__numonic_git_delete_merged "$@"
