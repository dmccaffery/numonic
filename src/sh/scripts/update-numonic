#! /usr/bin/env sh

set -e

if [ -t 1 ]; then
	FORMAT_CLEAR=$(tput sgr0)	# CLEAR ALL FORMAT
	FORMAT_BOLD=$(tput bold)	# SET BRIGHT/BOLD

	CLR_RED=$(tput setaf 1)		# ANSI RED
	CLR_YELLOW=$(tput setaf 3)	# ANSI YELLOW

	CLR_WARN="${FORMAT_BOLD}${CLR_YELLOW}"
	CLR_FAIL="${FORMAT_BOLD}${CLR_RED}"
else
	FORMAT_CLEAR=''

	CLR_WARN="\n********************************************************************************\n"
	CLR_FAIL="\n################################################################################\n"
fi

__numonic_print_warn()
{
	printf "${CLR_WARN}%s${FORMAT_CLEAR}\n" "$@"
}

__numonic_print_fail()
{
	printf "${CLR_FAIL}%s${FORMAT_CLEAR}\n" "$@"
}

alias print-warn='__numonic_print_warn'
alias print-fail='__numonic_print_fail'

__numonic_update()
{
	while :; do
		case $1 in
			--debug)
				debug=1
				;;
			-dr|--dry-run)
				dry_run=1
				;;
			-f|--force)
				rm -rf "${HOME}/.local/numonic/.sha" 1>/dev/null 2>&1
				;;
			-o|--org|--organization|--organisation)
				org="${2}"
				shift
				;;
			--organisation=*|--organization=*)
				org="${1#*=}"
				;;
			-t|--token)
				NUMONIC_TOKEN="${2}"
				shift
				;;
			--token=*)
				NUMONIC_TOKEN="${1#*=}"
				;;
			-v|--version)
				version="${2}"
				shift
				;;
			--version=*)
				version="${1#*=}"
				;;
			?*)
				if [ -z "${NUMONIC_SHELL:-}" ]; then
					NUMONIC_SHELL="${1}"
				elif [ -z "${version:-}" ]; then
					version="${1}"
				fi
				;;
			*)
				break
				;;
		esac
		shift
	done

	GITHUB_TOKEN=${GITHUB_TOKEN:-}
	NUMONIC_TOKEN=${NUMONIC_TOKEN:-${GITHUB_TOKEN}}
	NUMONIC_SHELL=${NUMONIC_SHELL:-${SHELL}}
	NUMONIC_SHELL=${NUMONIC_SHELL:-"zsh"}

	version=${version:-"main"}
	org=${org:-"automotiveMastermind"}
	sha_url="https://api.github.com/repos/${org}/numonic/commits/${version}?per_page=1"

	(
		if [ -n "${quiet:-}" ]; then
			exec 1>/dev/null
		fi

		if [ -n "${debug:-}" ]; then
			set -x
		fi

		set -- --fail --silent --show-error --location

		if [ -n "${NUMONIC_TOKEN:-}" ]; then
			set -- "$@" --header "'Authorization: token ${NUMONIC_TOKEN}'"
		fi

		sha=$(curl "$@" "${sha_url}" | grep sha | head -n 1 | sed 's#.*\:.*"\(.*\).*",#\1#')

		# detect if sha could be located
		if [ -z "${sha:-}" ]; then
			print-fail "numonic: cannot retrieve SHA of latest version. Are you connected to the internet?"
			return 1
		fi

		install_url="https://github.com/${org}/numonic/archive/${sha}.tar.gz"

		print-success '' \
			'INSTALL/UPDATE NUMONIC' \
			"ORGANIZATION : ${org}" \
			"VERSION      : ${version}" \
			'' \
			"SHA : ${sha}" \
			"URL : ${install_url}" \
		''

		if [ -n "${dry_run:-}" ]; then
			return 0
		fi

		sha_path=${HOME}/.local/numonic/.sha

		# detect if sha file exists
		if [ -f "${sha_path}" ]; then

			# get the value of the sha file
			current_sha=$(cat "${sha_path}")

			# print latest version already installed
			if [ "${sha}" = "${current_sha}" ]; then
				print-warn \
					"numonic: latest version already installed: ${sha}" \
					"  - run update-numonic with the --force flag to reinstall"

				return 0
			fi
		fi

		if [ -n "${dry_run:-}" ]; then
			print-warn \
				"numonic: a new version of numonic is available: ${sha}" \
				"  - run the update-numonic command line tool to upgrade"

			return 0
		fi

		install_temp=$(mktemp -d)

		curl "$@" --output "${install_temp}/numonic.tgz" "${install_url}"
		tar --extract \
			--gzip \
			--strip-components=1 \
			--file="${install_temp}/numonic.tgz" \
			--directory="${install_temp}"

		"${install_temp}/install.sh" "${NUMONIC_SHELL}" "${install_temp}"
	)
}

trap 'print-fail "numonic: terminating update..."; exit 1;' INT

__numonic_update "$@"
